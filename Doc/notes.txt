SERVER-CLIENT INTERACTION (high level)

The server:
	The server is sending servo signals through gpio.
	Maintains current servo configuration (which pins) and parameters (what steering).

The client:
	Sends instructions to the server.
	-add servo to specific pin
	-delete servo from specific pin
	-set servo parameter (steering, width, etc.)
	-reset system




SCENARIO:
[timestamp] | commnand | pin | value
sent:
[1] add 11
[2] set 11 0.5f
[3] set 11 0.6f
[4] set 11 0.7f

arrived:
[2] set 11 0.5f // must come after [1]
[1] add 11 // must arrive, must be barrier
[4] set 11 0.7f // fine
[3] set 11 0.6f // irrelevant, [4] already in effect

Needed:
- barriers for ordering critical messages (global, maybe separate as well)
- filtering late messages (separately for each servo)
- keep alive (separately for each servo)




NETWORK PROTOCOL (Remote Control Protocol / RCP)

The protocol is made on top of UDP as an application level protocol (like HTTP).

It is connection based similar to TCP, but datagram based, like UDP.
That is, it establishes a virtual connection with a remote host, then it can send datagrams (= messages = packets).

*Message types:
- reliable: must arrive and be acknowledged
- unreliable: may or may not arrive, doesn't matter

*Sequence numbers and ordering:
Each message has two numbers:
- sequence number: incremental ID for each packet
- batch number

Reliable messages act as a barrier, forcing ordering.
The sequence number of the latest reliable message is tracked by the reciever. Packets that arrive, and
have a batch number greater than the tracked number, must wait until the reliable packet arrives.

*Duplicates:
Reliable packet duplicates will certainly be out of order, and they are dropped.
Unreliable packets are not checked for duplicates.

*Acknowledgement procedure:
Sender:
 - resend the packet continously until the ackonowledgement is recieved
Reciever:
 - send an ackowledgement for each arriving packet
 - drop duplicates

*Establishing connection:
-> SYN
<- SYN-ACK
-> ACK
*Closing connection:
-> FIN
<- FIN-ACK
-> ACK

*Keepalive:
Both parties must send unreliable keepalives if no other message have been sent for some time.
If a party does not recieve any message for that time, the connection is considered broken.
In this case, the whole connection is closed.


*Message header:
+---------------------------+
| sequence number           |   0-31 bit
+---------------------------+
| batch number              |   32-63 bit
+---------------------------+
| flags                     |   64-95 bit
+---------------------------+

To reduce overhead, batch number could be relative, and only 16 bits.

Flags:
name	bit
SYN	0
FIN	1
ACK	2
KPL	3 (keep alive, no relevant data, drop packet)



*Security (optional):
Public key encoding. When the connection is established, public keys are sent with the connection request.
Then, all headers are encoded. This way, only the reciever can read the initial (and following) sequence numbers.
I'm no cryptographer, but hopefully this makes enough mess to make hijacking impossible.









